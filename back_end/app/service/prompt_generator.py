import json
import os
from app.models.base_model import BaseModel

class PromptGenerator(BaseModel):
    """
    G√©n√®re un prompt JSON pr√™t pour l'API (OpenAI, Perplexity‚Ä¶)
    √† partir des donn√©es s√©mantiques extraites du site.
    """

    def __init__(self, 
                 prompt_file="prompt_data.json", 
                 output_file="rgpd_prompt_to_model.json"):
        super().__init__()
        self.prompt_file = prompt_file
        self.output_file = output_file
        self.rgpd_points = [
            "Cookies et traceurs",
            "Politique de confidentialit√©",
            "Mentions l√©gales",
            "Formulaires et consentements",
            "S√©curit√© et transferts",
            "Mineurs",
            "Documentation",
            "Rapport final"
        ]
        self.prompt_data = self.load_prompt_data()

    def load_prompt_data(self):
        if not os.path.exists(self.prompt_file):
            raise FileNotFoundError(f"‚ùå Fichier introuvable : {self.prompt_file}")
        with open(self.prompt_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def build_prompt_text(self):
        return (
            "‚ö†Ô∏è R√©ponds uniquement en JSON valide, sans explications.\n"
            "Tu es un assistant IA sp√©cialis√© en conformit√© RGPD.\n"
            "Analyse les extraits de site suivants et √©value leur conformit√© pour chaque point RGPD.\n\n"
            f"Extraits de site :\n{json.dumps(self.prompt_data, ensure_ascii=False, indent=2)}\n\n"
            f"Points RGPD √† √©valuer : {', '.join(self.rgpd_points)}\n\n"
            "Format JSON attendu :\n"
            "[\n"
            "  {\n"
            "    \"point\": \"Nom du point RGPD\",\n"
            "    \"status\": \"conforme | partiellement conforme | non conforme | non d√©tect√©\",\n"
            "    \"evidence\": \"Court extrait du site justifiant l'√©valuation\",\n"
            "    \"recommendation\": \"Recommandation simple et concr√®te\"\n"
            "  }\n"
            "]"
        )

    def save_prompt(self):
        prompt_text = self.build_prompt_text()
        with open(self.output_file, "w", encoding="utf-8") as f:
            json.dump({"prompt": prompt_text}, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ Prompt g√©n√©r√© et sauvegard√© dans : {self.output_file}")

# ==========================
# üîπ Main
# ==========================
if __name__ == "__main__":
    generator = PromptGenerator()
    generator.save_prompt()

























